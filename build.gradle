apply plugin: 'java'

//Specify the main class and project version
ext.mainClassName = 'ch.tiim.trainingmanager.MainWrapper'
version = getVersionFromGit()


//Min java 1.8 for javafx
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8


//Add dependencies from maven
repositories {
    mavenCentral()
}
dependencies {
    compile group: 'org.json', name: 'json', version: '20141113'
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.8.6'
}


// Remove the file "MainWrapper.java" from the normal compile
// pipeline
sourceSets {
    mwrapper {
        java {
            srcDir 'src/main/java'
            include 'ch/scbirs/trainingmanager/MainWrapper.java'
        }
        compileClasspath += main.output
    }
    main {
        java {
            exclude 'ch/scbirs/trainingmanager/MainWrapper.java'
        }
    }
}

//Specify the content of the manifest
jar {
    doFirst {
        manifest {
            attributes([
                    'Manifest-Version'      : "1.0",
                    'Main-Class'            : project.ext.mainClassName,
                    'Class-Path'            : configurations.compile.collect { it.getName() }.join(' '),
                    'Implementation-Title'  : 'TrainingManager',
                    'Implementation-Version': version
            ])
        }
    }
    //Merge the MainWrapper back into the same jar
    from sourceSets.mwrapper.output
    archiveName = baseName + "." + extension
}

//Set java 1.5 compatibility for the MainWrapper
compileMwrapperJava {
    sourceCompatibility = JavaVersion.VERSION_1_5
    targetCompatibility = JavaVersion.VERSION_1_5
}

//Zip all dependencies that are not the "updater"
//into build/dist.zip
task zipDeps(type: Zip, dependsOn: 'build') {
    from({ project.configurations.runtime })
    from({ project.jar.archivePath })
    subprojects.each {
        if (it.name != 'Updater') {
            from({ it.jar.archivePath })
        }
    }
    destinationDir = file('build')
    archiveName = 'dist.zip'
}

// Copy "dist.zip" and "Updater.jar" to the dist_location
// or to "build/dist"
// Write version of the project to "version.txt"
// and the version of the updater to "updaterVersion.txt"
task dist(type: Copy, dependsOn: ['build', ':Updater:build', 'zipDeps']) {
    from({ project(':Updater').jar.archivePath })
    from({ project.zipDeps.archivePath })
    if (project.hasProperty('dist_location')) {
        into dist_location
    } else {
        into 'build/dist'
    }
    doFirst {
        destinationDir.mkdirs()
    }
    doLast {
        (new File(destinationDir, "version.txt")).write(project.version)
        (new File(destinationDir, "updaterVersion.txt")).write(project(':Updater').version)
    }
}

//Force rebuild when dist task in in the task graph
jar {
    outputs.upToDateWhen {
        !gradle.taskGraph.hasTask(dist)
    }
}

// Returns version based on git tag:
// first two blocks are the git tag name,
// third digit is commit number since last tag
def getVersionFromGit() {
    def versionString = "git describe --tags --long".execute().text.trim()

    def pattern = ~/v(\d+)\.(\d+)-(\d+)-(.*)/
    def major = 0
    def minor = 0
    def patch = 0
    def gitHash = "fatal_git_error"

    if (versionString ==~ pattern) {
        def matcher = versionString =~ pattern
        major = matcher[0][1]
        minor = matcher[0][2]
        patch = matcher[0][3]
        gitHash = matcher[0][4]
    }

    println "Current version: v${major}.${minor}.${patch}"

    return "v${major}.${minor}.${patch}"
}