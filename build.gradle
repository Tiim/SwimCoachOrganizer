import groovy.xml.MarkupBuilder
import org.jooq.util.GenerationTool

import javax.xml.bind.JAXB
import java.time.LocalDate

apply plugin: 'java'

//Specify the main class and project version
ext.mainClassName = 'ch.tiim.sco.MainWrapper'
project.ext.dbLocation = 'wd/file.db'
version = getVersionFromGit()

//Min java 1.8 for javafx
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath group: 'org.jooq', name: 'jooq-codegen', version: '3.6.1'
        classpath group: 'org.xerial', name: 'sqlite-jdbc', version: '3.+'
    }
}
//Add dependencies from maven
repositories {
    mavenCentral()
}

dependencies {
    //compile group: 'org.json', name: 'json', version: '20141113'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.+'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.+'
    compile group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.+'
    compile group: 'javax.persistence', name: 'persistence-api', version: '1.+'
    compile group: 'org.jooq', name: 'jooq', version: '3.+'
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.+'
    compile group: 'com.google.guava', name: 'guava', version: '12.+'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

// Remove the file "MainWrapper.java" from the normal compile
// pipeline
sourceSets {
    mwrapper {
        java {
            srcDir 'src/main/java'
            include 'ch/scbirs/sco/MainWrapper.java'
        }
        compileClasspath += main.output
    }
    main {
        java {
            exclude 'ch/scbirs/sco/MainWrapper.java'
        }
    }
    generated {
    }
}
compileJava.source sourceSets.generated.java, sourceSets.main.java

//Specify the content of the manifest
jar {
    doFirst {
        manifest {
            attributes([
                    'Manifest-Version'      : "1.0",
                    'Main-Class'            : project.ext.mainClassName,
                    'Class-Path'            : configurations.compile.collect { it.getName() }.join(' '),
                    'Implementation-Title'  : 'Swim Coach Organizer',
                    'Implementation-Version': version
            ])
        }
    }
    //Merge the MainWrapper back into the same jar
    from sourceSets.mwrapper.output
    archiveName = baseName + "." + extension
}

URLClassLoader loader = groovy.sql.Sql.class.classLoader
project.buildscript.configurations.classpath.each { File file ->
    loader.addURL(file.toURL())
}

task genDB << {
    file('wd').mkdirs()
    if (file('wd/file.db').exists()) {
        file('wd/file.db').delete()
    }
    println Class.forName("org.sqlite.JDBC");
    groovy.sql.Sql sql = groovy.sql.Sql.newInstance('jdbc:sqlite:wd/file.db', null, null, 'org.sqlite.JDBC')
    String[] cmds = file('src/main/resources/ch/tiim/sco/database/make.sql').text.split(";");
    for (String cmd : cmds) {
        sql.execute(cmd)
    }
    sql.close()
}

task genJOOQ(dependsOn: ['genDB']) << {
    if (file('src/generated/java/ch').exists()) {
        print file('src/generated/java/ch').deleteDir()
    }
    GenerationTool.generate(
            JAXB.unmarshal(file('src/main/resources/jooq.xml'), org.jooq.util.jaxb.Configuration.class)
    )
}
assemble.dependsOn genJOOQ

//Set java 1.5 compatibility for the MainWrapper
compileMwrapperJava {
    sourceCompatibility = JavaVersion.VERSION_1_5
    targetCompatibility = JavaVersion.VERSION_1_5
}

task metadata << {
    def writer = new OutputStreamWriter(file('build/meta.xml').newOutputStream())
    def xml = new MarkupBuilder(writer)
    xml.metadata() {
        build(version: project.version, date: LocalDate.now())
        launch(arg: "java -jar " + project.name + ".jar")
    }
}

//Zip all dependencies that are not the "updater"
//into build/dist.zip
task zipDeps(type: Zip, dependsOn: ['build', 'metadata']) {
    from({ project.configurations.runtime })
    from({ project.jar.archivePath })
    from(file('build/meta.xml'))
    subprojects.each {
        if (it.name != 'Updater') {
            from({ it.jar.archivePath })
        }
    }
    destinationDir = file('build')
    archiveName = 'dist.zip'
}

// Copy "dist.zip" and "Updater.jar" to the dist_location
// or to "build/dist"
// Write version of the project to "version.txt"
// and the version of the updater to "updaterVersion.txt"
task dist(type: Copy, dependsOn: ['build', ':Updater:build', 'zipDeps']) {
    from({ project(':Updater').jar.archivePath })
    from({ project.zipDeps.archivePath })
    if (project.hasProperty('dist_location')) {
        into dist_location
    } else {
        into 'build/dist'
    }
    doFirst {
        destinationDir.mkdirs()
    }
    doLast {
        (new File(destinationDir, "version.txt")).write(project.version)
        (new File(destinationDir, "updaterVersion.txt")).write(project(':Updater').version)
    }
}

//Force rebuild when dist task in in the task graph
jar {
    outputs.upToDateWhen {
        !gradle.taskGraph.hasTask(dist)
    }
}

// Returns version based on git tag:
// first two blocks are the git tag name,
// third digit is commit number since last tag
def getVersionFromGit() {
    def versionString = "git describe --tags --long".execute().text.trim()
    def branch = "git rev-parse --abbrev-ref HEAD".execute().text.trim()

    def pattern = ~/v(\d+)\.(\d+)-(\d+)-(.*)/
    def major = 0
    def minor = 0
    def patch = 0
    def gitHash = "fatal_git_error"

    if (versionString ==~ pattern) {
        def matcher = versionString =~ pattern
        major = matcher[0][1]
        minor = matcher[0][2]
        patch = matcher[0][3]
        gitHash = matcher[0][4]
    }

    def v = "v${major}.${minor}.${patch}-${branch}:${gitHash}"

    println "Current version: ${v}"

    return v
}
