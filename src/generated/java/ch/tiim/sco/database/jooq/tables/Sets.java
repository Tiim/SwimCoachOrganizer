/**
 * This class is generated by jOOQ
 */
package ch.tiim.sco.database.jooq.tables;


import ch.tiim.sco.database.jooq.DefaultSchema;
import ch.tiim.sco.database.jooq.Keys;
import ch.tiim.sco.database.jooq.tables.records.SetsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sets extends TableImpl<SetsRecord> {

	private static final long serialVersionUID = 821483067;

	/**
	 * The reference instance of <code>sets</code>
	 */
	public static final Sets SETS = new Sets();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<SetsRecord> getRecordType() {
		return SetsRecord.class;
	}

	/**
	 * The column <code>sets.set_id</code>.
	 */
	public final TableField<SetsRecord, Integer> SET_ID = createField("set_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>sets.name</code>.
	 */
	public final TableField<SetsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>sets.content</code>.
	 */
	public final TableField<SetsRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>sets.distance_f1</code>.
	 */
	public final TableField<SetsRecord, Integer> DISTANCE_F1 = createField("distance_f1", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>sets.distance_f2</code>.
	 */
	public final TableField<SetsRecord, Integer> DISTANCE_F2 = createField("distance_f2", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>sets.distance_f3</code>.
	 */
	public final TableField<SetsRecord, Integer> DISTANCE_F3 = createField("distance_f3", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>sets.intensity</code>.
	 */
	public final TableField<SetsRecord, Integer> INTENSITY = createField("intensity", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>sets.focus_id</code>.
	 */
	public final TableField<SetsRecord, Integer> FOCUS_ID = createField("focus_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>sets.form_id</code>.
	 */
	public final TableField<SetsRecord, Integer> FORM_ID = createField("form_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>sets.notes</code>.
	 */
	public final TableField<SetsRecord, String> NOTES = createField("notes", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>sets.interval</code>.
	 */
	public final TableField<SetsRecord, Integer> INTERVAL = createField("interval", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>sets.is_pause</code>.
	 */
	public final TableField<SetsRecord, Boolean> IS_PAUSE = createField("is_pause", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

	/**
	 * Create a <code>sets</code> table reference
	 */
	public Sets() {
		this("sets", null);
	}

	/**
	 * Create an aliased <code>sets</code> table reference
	 */
	public Sets(String alias) {
		this(alias, SETS);
	}

	private Sets(String alias, Table<SetsRecord> aliased) {
		this(alias, aliased, null);
	}

	private Sets(String alias, Table<SetsRecord> aliased, Field<?>[] parameters) {
		super(alias, DefaultSchema.DEFAULT_SCHEMA, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<SetsRecord> getPrimaryKey() {
		return Keys.PK_SETS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<SetsRecord>> getKeys() {
		return Arrays.<UniqueKey<SetsRecord>>asList(Keys.PK_SETS);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<SetsRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<SetsRecord, ?>>asList(Keys.FK_SETS_SET_FOCUS_1, Keys.FK_SETS_SET_FORM_1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Sets as(String alias) {
		return new Sets(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Sets rename(String name) {
		return new Sets(name, null);
	}
}
